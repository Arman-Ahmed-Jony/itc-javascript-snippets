{
	"itc.action": {
		"scope": "javascript,typescript",
		"prefix": "itc.acttion",
		"body": [
			"import Api from 'services/$1Service'",
			"",
			"export default {",
			"  async getAll (payload) {",
			"    try {",
			"      const { data: { data } } = await Api.getAll(payload)",
			"      this.$1s = data",
			"    } catch (error) {}",
			"  },",
			"  async getById (payload) {",
			"    try {",
			"      const { data: { data } } = await Api.getById(payload)",
			"      this.$1 = data",
			"    } catch (error) {}",
			"  },",
			"  async create (payload) {",
			"    try {",
			"      const { data } = await Api.create(payload)",
			"      this.$1s.push(data)",
			"    } catch (error) {}",
			"  },",
			"  async update (id, payload) {",
			"    try {",
			"      const { data } = await Api.update(id, payload)",
			"      const index = this.$1s.findIndex(($1) => $1.id === id)",
			"      this.$1s[index] = data",
			"    } catch (error) {}",
			"  },",
			"  async deleteById (id) {",
			"    try {",
			"      await Api.deleteById(id)",
			"      this.$1s = this.$1s.filter($1 => $1.id !== id)",
			"    } catch (error) {}",
			"  }",
			"}",
		],
		"description": "it's the action file"
	},
	"itc.api": {
		"scope": "javascript,typescript",
		"prefix": "itc.api",
		"body": [
			"import client from './client'",
			"",
			"const RESOURCE_NAME = '$1'",
			"",
			"export default {",
			"  getAll () {",
			"    return client().get(RESOURCE_NAME)",
			"  },",
			"  getById (id) {",
			"    return client().get(`\\${RESOURCE_NAME}/${id}`)",
			"  },",
			"  create (payload) {",
			"    return client().post(RESOURCE_NAME, payload)",
			"  },",
			"  update (id, payload) {",
			"    return client().put(`\\${RESOURCE_NAME}/${id}`, payload)",
			"  },",
			"  deleteById (id) {",
			"    return client().delete(`\\${RESOURCE_NAME}/${id}`)",
			"  }",
			"}"
		],
		"description": "it's the api file"
	}
}
