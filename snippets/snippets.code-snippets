{
  "init.store": {
    "scope": "javascript,typescript",
    "prefix": "init.store",
    "body": [
      "import { defineStore } from 'pinia'",
      "import actions from './actions'",
      "",
      "export const use$1Store = defineStore('$2s', {",
      "  state: () => ({",
      "    $2s: [],",
      "    $2: {}",
      "  }),",
      "  actions",
      "})"
    ],
    "description": "it's a basic store file"
  },
  "init.action": {
    "scope": "javascript,typescript",
    "prefix": "init.action",
    "body": [
      "import Api from 'services/$1Service'",
      "",
      "export default {",
      "  async getAll (payload) {",
      "    try {",
      "      const { data: { data } } = await Api.getAll(payload)",
      "      this.$1s = data",
      "    } catch (error) {}",
      "  },",
      "  async getById (payload) {",
      "    try {",
      "      const { data: { data } } = await Api.getById(payload)",
      "      this.$1 = data",
      "    } catch (error) {}",
      "  },",
      "  async create (payload) {",
      "    try {",
      "      const { data } = await Api.create(payload)",
      "      this.$1s.push(data)",
      "    } catch (error) {}",
      "  },",
      "  async update (id, payload) {",
      "    try {",
      "      const { data } = await Api.update(id, payload)",
      "      const index = this.$1s.findIndex(($1) => $1.id === id)",
      "      this.$1s[index] = data",
      "    } catch (error) {}",
      "  },",
      "  async deleteById (id) {",
      "    try {",
      "      await Api.deleteById(id)",
      "      this.$1s = this.$1s.filter($1 => $1.id !== id)",
      "    } catch (error) {}",
      "  }",
      "}"
    ],
    "description": "it's the action file"
  },
  "init.service": {
    "scope": "javascript,typescript",
    "prefix": "init.service",
    "body": [
      "import client from './client'",
      "",
      "const RESOURCE_NAME = '$1'",
      "",
      "export default {",
      "  getAll () {",
      "    return client().get(RESOURCE_NAME)",
      "  },",
      "  getById (id) {",
      "    return client().get(`${RESOURCE_NAME}/${id}`)",
      "  },",
      "  create (payload) {",
      "    return client().post(RESOURCE_NAME, payload)",
      "  },",
      "  update (id, payload) {",
      "    return client().put(`${RESOURCE_NAME}/${id}`, payload)",
      "  },",
      "  deleteById (id) {",
      "    return client().delete(`${RESOURCE_NAME}/${id}`)",
      "  }",
      "}"
    ],
    "description": "it's the api service file"
  },
  "init.vue.list": {
    "scope": "javascript,typescript",
    "prefix": "init.vue.list",
    "body": [
      "<script setup>",
      "",
      "defineProps({",
      "  modelValue: {",
      "    type: Array,",
      "    default: () => []",
      "  }",
      "})",
      "defineEmits([",
      "'edit', 'delete', 'view'",
      "])",
      "",
      "</script>",
      "",
      "<template>",
      "<q-list>",
      "  <q-item",
      "    clickable",
      "    v-for=\"(item, index) in modelValue\"",
      "    :key=\"index\"",
      "  >",
      "  <q-item-section @click=\"\\$emit('view', item)\">",
      "    {{ item.name }}",
      "  </q-item-section>",
      "  <q-item-section side>",
      "    <OverflowMenu",
      "      :menus=\"[",
      "        {",
      "          label: 'Edit',",
      "          handler: () => { \\$emit('edit', item)}",
      "        },",
      "        {",
      "          label: 'Delete',",
      "          handler: () => { \\$emit('delete', item.id)},",
      "          warning: {",
      "          show: true,",
      "          entityName: 'item',",
      "          entityType: 'a item named'",
      "          }",
      "        }",
      "      ]\"",
      "    />",
      "   </q-item-section>",
      "  </q-item>",
      "</q-list>",
      "</template>"
    ],
    "description": "it's a basic list file"
  },
  "init.vue.form": {
    "scope": "javascript,typescript",
    "prefix": "init.vue.form",
    "body": [
      "<script setup>",
      "import { ref, watchEffect } from 'vue'",
      "",
      "const props = defineProps({",
      "modelValue: {",
      "   type: Object,",
      "   required: false,",
      "   default: () => {",
      "   return {",
      "       name: '',",
      "   }",
      "   }",
      "}",
      "})",
      "",
      "const emit = defineEmits([",
      "   'submit'",
      "])",
      "",
      "const form = ref({})",
      "",
      "watchEffect(() => {",
      "JSON.parse(JSON.stringify(props.modelValue))",
      "})",
      "",
      "const handleSubmit = () => {",
      "emit('submit', form.value)",
      "}",
      "",
      "</script>",
      "",
      "<template>",
      "<q-form @submit=\"handleSubmit\">",
      "   <q-card-section class=\"q-pa-none\">",
      "   <q-input",
      "     label=\"Name\"",
      "     v-model=\"form.name\"",
      "     placeholder=\"Type your Project Name\"",
      "     type=\"text\"",
      "     :rules=\"[(val) => !!val || 'Field is required']\"",
      "   />",
      "   </q-card-section>",
      "   <q-card-actions",
      "     class=\"q-pa-none\"",
      "     align=\"right\"",
      "   >",
      "     <slot name=\"action\"/>",
      "   </q-card-actions>",
      "</q-form>",
      "</template>"
    ],
    "description": "it's a basic quasar form file"
  },
  "init.vue.index": {
    "scope": "javascript,typescript",
    "prefix": "init.vue.index",
    "body": [
      "<script setup>",
      "import { ${2:useStore} } from 'src/stores/${1:store-file}'",
      "import { computed, onMounted, ref } from 'vue'",
      "import ${3:FormComponent} from '../components/${3:FormComponent}.vue'",
      "import ${4:ListComponent} from '../components/${4:ListComponent}.vue'",
      "",
      "const createDialog = ref(false)",
      "const editDialog = ref(false)",
      "",
      "const ${5:store} = ${2:useStore}()",
      "const ${6:stateName} = computed(() => ${5:store}.${6:stateName})",
      "onMounted(() => {",
      "  ${5:store}.getAll()",
      "})",
      "",
      "const handleCreate = async (data) => {",
      "  try {",
      "    await ${5:store}.create(data)",
      "    createDialog.value = false",
      "  } catch (error) {}",
      "}",
      "",
      "const handleView = (item) => {",
      "  //here gose view related implementation",
      "}",
      "",
      "const selectedItem = ref({})",
      "const handleEdit = async (item) => {",
      "  await ${5:store}.update(item.id, item)",
      "  editDialog.value = false",
      "}",
      "const handleDelete = (id) => {",
      "  ${5:store}.deleteById(id)",
      "}",
      "</script>",
      "<template>",
      "  <q-page padding>",
      "    <${4:ListComponent}",
      "      v-model=\"${6:stateName}\"",
      "      @view=\"handleView\"",
      "      @edit=\"editDialog=true, selectedItem=\\$event\"",
      "      @delete=\"handleDelete\"",
      "    />",
      "    <q-page-sticky",
      "      position=\"bottom-right\"",
      "      :offset=\"[18, 18]\"",
      "    >",
      "      <q-btn",
      "        rounded",
      "        glossy",
      "        icon=\"o_add\"",
      "        color=\"primary\"",
      "        padding=\"sm\"",
      "        size=\"lg\"",
      "        @click=\"createDialog = true\"",
      "      />",
      "    </q-page-sticky>",
      "    <q-dialog v-model=\"createDialog\">",
      "      <q-card",
      "        style=\"width: 700px;\"",
      "        class=\"q-pa-sm\"",
      "      >",
      "        <${3:FormComponent} @submit=\"handleCreate\">",
      "          <template #action>",
      "            <div class=\"row justify-end\">",
      "              <q-btn",
      "               color=\"primary\"",
      "                label=\"Create\"",
      "                type=\"submit\"",
      "                no-caps",
      "              />",
      "            </div>",
      "          </template>",
      "        </${3:FormComponent}>",
      "      </q-card>",
      "    </q-dialog>",
      "    <q-dialog v-model=\"editDialog\">",
      "      <q-card",
      "        style=\"width: 700px;\"",
      "        class=\"q-pa-sm\"",
      "      >",
      "        <${3:FormComponent}",
      "          @submit=\"handleEdit\"",
      "          :data=\"selectedItem\"",
      "        >",
      "          <template #action>",
      "            <div class=\"row justify-end\">",
      "              <q-btn",
      "                color=\"primary\"",
      "                label=\"Edit\"",
      "                type=\"submit\"",
      "                no-caps",
      "              />",
      "            </div>",
      "          </template>",
      "        </${3:FormComponent}>",
      "      </q-card>",
      "    </q-dialog>",
      "  </q-page>",
      "</template>"
    ],
    "description": "it's a basic quasar form file"
  }
}
