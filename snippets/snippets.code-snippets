{
	"itc.action": {
		"scope": "javascript,typescript",
		"prefix": "itc.action",
		"body": [
			"import Api from 'services/$1Service'",
			"",
			"export default {",
			"  async getAll (payload) {",
			"    try {",
			"      const { data: { data } } = await Api.getAll(payload)",
			"      this.$1s = data",
			"    } catch (error) {}",
			"  },",
			"  async getById (payload) {",
			"    try {",
			"      const { data: { data } } = await Api.getById(payload)",
			"      this.$1 = data",
			"    } catch (error) {}",
			"  },",
			"  async create (payload) {",
			"    try {",
			"      const { data } = await Api.create(payload)",
			"      this.$1s.push(data)",
			"    } catch (error) {}",
			"  },",
			"  async update (id, payload) {",
			"    try {",
			"      const { data } = await Api.update(id, payload)",
			"      const index = this.$1s.findIndex(($1) => $1.id === id)",
			"      this.$1s[index] = data",
			"    } catch (error) {}",
			"  },",
			"  async deleteById (id) {",
			"    try {",
			"      await Api.deleteById(id)",
			"      this.$1s = this.$1s.filter($1 => $1.id !== id)",
			"    } catch (error) {}",
			"  }",
			"}",
		],
		"description": "it's the action file"
	},
	"itc.api": {
		"scope": "javascript,typescript",
		"prefix": "itc.api",
		"body": [
			"import client from './client'",
			"",
			"const RESOURCE_NAME = '$1'",
			"",
			"export default {",
			"  getAll () {",
			"    return client().get(RESOURCE_NAME)",
			"  },",
			"  getById (id) {",
			"    return client().get(`\\${RESOURCE_NAME}/${id}`)",
			"  },",
			"  create (payload) {",
			"    return client().post(RESOURCE_NAME, payload)",
			"  },",
			"  update (id, payload) {",
			"    return client().put(`\\${RESOURCE_NAME}/${id}`, payload)",
			"  },",
			"  deleteById (id) {",
			"    return client().delete(`\\${RESOURCE_NAME}/${id}`)",
			"  }",
			"}"
		],
		"description": "it's the api service file"
	},
	"itc.list": {
		"scope": "javascript,typescript",
		"prefix": "itc.list",
		"body": [
			"<script setup>",
      "",
			"defineProps({",
			"  modelValue: {",
			"    type: Array,",
			"    default: () => []",
			"  }",
			"})",
			"defineEmits([",
			"'edit', 'delete', 'view'",
			"])",
      "",
			"</script>",
      "",
			"<template>",
			"<q-list>",
			"  <q-item",
      "    clickable",
      "    v-for=\"(item, index) in modelValue\"",
      "    :key=\"index\"",
			"  >",
			"  <q-item-section @click=\"$emit('view', item)\">",
			"    {{ item.name }}",
			"  </q-item-section>",
			"  <q-item-section side>",
			"    <OverflowMenu",
			"      :menus=\"[",
			"        {",
      "          label: 'Edit',",
      "          handler: () => { $emit('edit', item)}",
			"        },",
			"        {",
      "          label: 'Delete',",
      "          handler: () => { $emit('delete', item.id)},",
      "          warning: {",
      "          show: true,",
      "          entityName: 'item',",
      "          entityType: 'a item named'",
      "          }",
			"        }",
			"      ]\"",
			"    />",
			"   </q-item-section>",
			"  </q-item>",
			"</q-list>",
			"</template>",
		],
		"description": "it's a basic list file"
	},
	"itc.form": {
		"scope": "javascript,typescript",
		"prefix": "itc.form",
		"body": [
			"<script setup>",
			"import { ref, watchEffect } from 'vue'",
			"",
			"const props = defineProps({",
			"modelValue: {",
			"   type: Object,",
			"   required: false,",
			"   default: () => {",
			"   return {",
			"       name: '',",
			"   }",
			"   }",
			"}",
			"})",
			"",
			"const emit = defineEmits([",
			"   'submit'",
			"])",
			"",
			"const form = ref({})",
			"",
			"watchEffect(() => {",
			"JSON.parse(JSON.stringify(props.modelValue))",
			"})",
			"",
			"const handleSubmit = () => {",
			"emit('submit', form.value)",
			"}",
			"",
			"</script>",
			"",
			"<template>",
			"<q-form @submit=\"handleSubmit\">",
			"   <q-card-section class=\"q-pa-none\">",
			"   <q-input",
			"     label=\"Name\"",
			"     v-model=\"form.name\"",
			"     placeholder=\"Type your Project Name\"",
			"     type=\"text\"",
			"     :rules=\"[(val) => !!val || 'Field is required']\"",
			"   />",
			"   </q-card-section>",
			"   <q-card-actions",
			"     class=\"q-pa-none\"",
			"     align=\"right\"",
			"   >",
			"     <slot name=\"action\"/>",
			"   </q-card-actions>",
			"</q-form>",
			"</template>",	

		],
		"description": "it's a basic quasar form file"
	}
}
